services:
  app:
    container_name: app
    restart: unless-stopped
    build:
      context: ./app
    environment:
      - PORT=3000
      - ORIGIN=http://87.242.103.101

    env_file:
      - ./secrets/app.env
    volumes:
      - ./static:/app/static
    ports:
      - 80:3000

  # redis:
  #   image: redis/redis-stack-server:latest
  #   restart: always
  #   privileged: true
  #   labels:
  #     - "autoheal=true"
  #   command: redis-server
  #   volumes:
  #     - ./volumes/redis:/data
  #     - ./conf/redis.conf:/etc/redis-stack.conf
  #   ports:
  #     - "6379:6379"
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
  #     interval: 2m
  #     timeout: 20s
  #     retries: 3
  #     start_period: 5s
  #   deploy:
  #     resources:
  #       limits:
  #         cpus: '0.50'
  #         memory: 1000M

  ml:
    restart: always
    environment:
      _UVICORN_HOST: "0.0.0.0"
      _UVICORN_PORT: 8000

    ports:
      - "8001:8000"

    build:
      context: ./ml
      dockerfile: Dockerfile
    depends_on:
      # - redis
      - search
    volumes:
      - ./ml:/app
      - ./secrets/ml.env:/app/.env
    deploy:
      resources:
        limits:
          cpus: '2.00'
          memory: 10000M

  search:
    build:
      context: ./search
      dockerfile: Dockerfile
    ports:
      - "8002:8000"
    volumes:
      - ./search:/app
      - ./secrets/search.json:/app/config.json
    deploy:
      resources:
        limits:
          cpus: '1.00'
          memory: 2000M

  # postgres:
  #   image: postgres:14.1-alpine
  #   container_name: postgres
  #   restart: always

  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready"]
  #     interval: 1s
  #     timeout: 5s
  #     retries: 10


    # volumes:
    #   - db:/var/lib/postgresql/data

  #   volumes:
  #     - db:/var/lib/postgresql/data

    # environment:
    #   PGUSER: $DB_USER
    #   POSTGRES_PASSWORD: $DB_PASS

    # ports:
    #   - 5432:5432
  #   environment:
  #     PGUSER: $DB_USER
  #     POSTGRES_PASSWORD: $DB_PASS

  #   ports:
  #     - 5432:5432
    # networks:
      # - ldt

  adminer:
    image: adminer
    container_name: adminer
    restart: always
    ports:
      - 8080:7000


  # nginx:
  #   image: nginx
  #   container_name: nginx
  #   ports:
  #     - 80:80
  #     - 443:443
  #   restart: always
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf
  #     - ./certbot/conf:/etc/letsencrypt
  #     - ./certbot/www:/var/www/certbot

  # certbot:
  #   image: certbot/certbot:latest
  #   #docker-compose run --rm certbot certonly --webroot --webroot-path /var/www/certbot/ --dry-run -d domain_name -
  #   #docker-compose run --rm certbot certonly --webroot --webroot-path /var/www/certbot/ -d domain_name
  #   volumes:
  #     - "./certbot/conf:/etc/letsencrypt"
  #     - "./certbot/www:/var/www/certbot"
# networks:
  # ldt:
    # driver: bridge
volumes:
  db:
    driver: local
